Utility Functions (call these via self):
def _check_grasp(self, gripper, object_geoms):
    """
    Checks whether the specified gripper as defined by @gripper is grasping the specified object in the environment.
    If multiple grippers are specified, will return True if at least one gripper is grasping the object.

    By default, this will return True if at least one geom in both the "left_fingerpad" and "right_fingerpad" geom
    groups are in contact with any geom specified by @object_geoms. Custom gripper geom groups can be
    specified with @gripper as well.

    Args:
        gripper (GripperModel or str or list of str or list of list of str or dict): If a MujocoModel, this is specific
            gripper to check for grasping (as defined by "left_fingerpad" and "right_fingerpad" geom groups). Otherwise,
            this sets custom gripper geom groups which together define a grasp. This can be a string
            (one group of single gripper geom), a list of string (multiple groups of single gripper geoms) or a
            list of list of string (multiple groups of multiple gripper geoms), or a dictionary in the case
            where the robot has multiple arms/grippers. At least one geom from each group must be in contact
            with any geom in @object_geoms for this method to return True.
        object_geoms (str or list of str or MujocoModel): If a MujocoModel is inputted, will check for any
            collisions with the model's contact_geoms. Otherwise, this should be specific geom name(s) composing
            the object to check for contact.

    Returns:
        bool: True if the gripper is grasping the given object
    """
    # Convert object, gripper geoms into standardized form
    if isinstance(object_geoms, MujocoModel):
        o_geoms = object_geoms.contact_geoms
    else:
        o_geoms = [object_geoms] if type(object_geoms) is str else object_geoms

    if isinstance(gripper, GripperModel):
        g_geoms = [gripper.important_geoms["left_fingerpad"], gripper.important_geoms["right_fingerpad"]]
    elif type(gripper) is str:
        g_geoms = [[gripper]]
    elif isinstance(gripper, dict):
        assert all([isinstance(gripper[arm], GripperModel) for arm in gripper]), "Invalid gripper dict format!"
        return any([self._check_grasp(gripper[arm], object_geoms) for arm in gripper])
    else:
        # Parse each element in the gripper_geoms list accordingly
        g_geoms = [[g_group] if type(g_group) is str else g_group for g_group in gripper]

    # Search for collisions between each gripper geom group and the object geoms group
    for g_group in g_geoms:
        if not self.check_contact(g_group, o_geoms):
            return False
    return True

def _gripper_to_target(self, gripper, target, target_type="body", return_distance=False):
    """
    Calculates the (x,y,z) Cartesian distance (target_pos - gripper_pos) from the specified @gripper to the
    specified @target. If @return_distance is set, will return the Euclidean (scalar) distance instead.
    If the @gripper is a dict, will return the minimum distance across all grippers.

    Args:
        gripper (MujocoModel or dict): Gripper model to update grip site rgb
        target (MujocoModel or str): Either a site / geom / body name, or a model that serves as the target.
            If a model is given, then the root body will be used as the target.
        target_type (str): One of {"body", "geom", or "site"}, corresponding to the type of element @target
            refers to.
        return_distance (bool): If set, will return Euclidean distance instead of Cartesian distance

    Returns:
        np.array or float: (Cartesian or Euclidean) distance from gripper to target
    """
    if isinstance(gripper, dict):
        assert all([isinstance(gripper[arm], GripperModel) for arm in gripper]), "Invalid gripper dict format!"
        # get the min distance to the target if there are multiple arms
        if return_distance:
            return min(
                [self._gripper_to_target(gripper[arm], target, target_type, return_distance) for arm in gripper]
            )
        else:
            return min(
                [self._gripper_to_target(gripper[arm], target, target_type, return_distance) for arm in gripper],
                key=lambda x: np.linalg.norm(x),
            )

    # Get gripper and target positions
    gripper_pos = self.sim.data.get_site_xpos(gripper.important_sites["grip_site"])
    # If target is MujocoModel, grab the correct body as the target and find the target position
    if isinstance(target, MujocoModel):
        target_pos = self.sim.data.get_body_xpos(target.root_body)
    elif target_type == "body":
        target_pos = self.sim.data.get_body_xpos(target)
    elif target_type == "site":
        target_pos = self.sim.data.get_site_xpos(target)
    else:
        target_pos = self.sim.data.get_geom_xpos(target)
    # Calculate distance
    diff = target_pos - gripper_pos
    # Return appropriate value
    return np.linalg.norm(diff) if return_distance else diff

def _base_to_pos(self, target):
    """
    Calculates the (x,y,z) Cartesian distance (target_pos - base_pos) from the mobile base of the robot to the
    specified target position
    """
    base_pos = self.sim.data.get_site_xpos("mobilebase0_center")
    # Calculate distance
    diff = target - base_pos
    # Return appropriate value
    return np.linalg.norm(diff)

def check_contact(self, geoms_1, geoms_2=None):
    """
    Finds contact between two geom groups.
    Args:
        geoms_1 (str or list of str or MujocoModel): an individual geom name or list of geom names or a model. If
            a MujocoModel is specified, the geoms checked will be its contact_geoms
        geoms_2 (str or list of str or MujocoModel or None): another individual geom name or list of geom names.
            If a MujocoModel is specified, the geoms checked will be its contact_geoms. If None, will check
            any collision with @geoms_1 to any other geom in the environment
    Returns:
        bool: True if any geom in @geoms_1 is in contact with any geom in @geoms_2.
    """
    return SU.check_contact(sim=self.sim, geoms_1=geoms_1, geoms_2=geoms_2)

def get_contacts(self, model):
    """
    Checks for any contacts with @model (as defined by @model's contact_geoms) and returns the set of
    geom names currently in contact with that model (excluding the geoms that are part of the model itself).
    Args:
        model (MujocoModel): Model to check contacts for.
    Returns:
        set: Unique geoms that are actively in contact with this model.
    Raises:
        AssertionError: [Invalid input type]
    """
    return SU.get_contacts(sim=self.sim, model=model)

def is_open(self, object1):
    joints = object1.joints[:1]
    for joint in joints:
        qpos_addr = self.sim.model.get_joint_qpos_addr(joint)
        qpos = self.sim.data.qpos[qpos_addr]
        if object1.is_open(qpos):
            return True
    return False

def is_closed(self, object1):
    joints = object1.joints[:1]
    for joint in joints:
        qpos_addr = self.sim.model.get_joint_qpos_addr(joint)
        qpos = self.sim.data.qpos[qpos_addr]
        if object1.is_close(qpos):
            return True
    return False

Additional robot utility functions (call via self.robots[0]):
def check_q_limits(self):
    """
    Check if this robot is either very close or at the joint limits

    Returns:
        bool: True if this arm is near its joint limits
    """
    tolerance = 0.1
    for qidx, (q, q_limits) in enumerate(
        zip(self.sim.data.qpos[self._ref_joint_pos_indexes], self.sim.model.jnt_range[self._ref_joint_indexes])
    ):
        if q_limits[0] != q_limits[1] and not (q_limits[0] + tolerance < q < q_limits[1] - tolerance):
            ROBOSUITE_DEFAULT_LOGGER.warning("Joint limit reached in joint " + str(qidx))
            return True
    return False